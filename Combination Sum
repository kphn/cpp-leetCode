class Solution {
public:
	void dfs(int target,int nowat, vector<int> v,vector<int>& candidates,vector<vector<int>> &res){
		for (int i = nowat; i < candidates.size(); ++i)
		{
			if (candidates[i]<target)
			{
				v.push_back(candidates[i]);
				dfs(target - candidates[i],i,v,candidates,res);
				v.pop_back();
			}
			else if (target == candidates[i])
			{
				v.push_back(target);
				res.push_back(v);
				return;
			}else return;
		}
	}
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>> res;
        std::vector<int> v;
        dfs(target,0,v,candidates,res);
        return res;
    }
};
