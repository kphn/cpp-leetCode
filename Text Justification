class Solution {
public:
    vector<string> fullJustify(vector<string>& words, int maxWidth) {
        std::vector<string> res;
        int start=0,end=0,minWidth=0;
        while(end<words.size()){
            minWidth=0;
            start = end;
            minWidth += words[start].size();    //加上第一个词
            while(minWidth< maxWidth && end<words.size()-1){
                minWidth++;         //加上空格
                end++;              //指针后移
                minWidth += words[end].size();  //加上后一个词
            }
			if(minWidth>maxWidth){
				minWidth -= (words[end].size()+1);
			}else if(minWidth<=maxWidth){
				end++;
			}
            if(start == end){       //一个词满或者是最后一个词
                end++;
            }
            if(end-start == 1){     //将一个词的所有情况进行统一
                string temp = words[start];
                for(int i=0;i<maxWidth-words[start].size();i++){
                    temp +=" ";
                }
                res.push_back(temp);
            }else if(end - start>1){ 
				string temp1 ="";
				//两个词以上的空格的分配
				//最后一行单独分配
				if(end == words.size()){
					for(int i=start;i<end-1;i++){
						temp1+=words[i];
						temp1+=" ";
					}
					temp1+=words.back();
					while(temp1.size()<maxWidth)temp1+=" ";
				}
				else{
                std::vector<int> v(end-start-1,1);
                int spaces = maxWidth - minWidth;
                /*v[0] += spaces/(end-start-1) + spaces%(end-start-1);
                for(int i=1;i<end-start-1;i++){
                    v[i]+= spaces/(end-start-1);
                }*/
				for(int i=0;i<spaces;i++){
					v[i%(end-start-1)]++;
				}
                //if(end == words.size()-1)end++;         //指针知道最后一个词后移
               
                for(int i=start;i<end-1;i++){
                    temp1+=words[i];
					for(int j=0;j<v[i-start];j++){
                        temp1+=" ";
                    }
                }
                temp1+=words[end-1];
				}
                res.push_back(temp1);
            }

        }
        return res;
    }
};
