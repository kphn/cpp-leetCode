/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    void preOrder(TreeNode*root,vector<TreeNode*>&res){
        if(!root)return;
        res.push_back(root);
        preOrder(root->left,res);
        preOrder(root->right,res);
    }
    void flatten(TreeNode* root) {
        std::vector<TreeNode*> v;
        preOrder(root,v);
        if(v.size() == 0)return;
        for(int i=0;i<v.size()-1;i++){
            v[i]->left = NULL;
            v[i]->right = v[i+1];
        }
        v.back()->left = NULL;
        v.back()->right = NULL;
    }
};


Given

         1
        / \
       2   5
      / \   \
     3   4   6
The flattened tree should look like:
   1
    \
     2
      \
       3
        \
         4
          \
           5
            \
             6
