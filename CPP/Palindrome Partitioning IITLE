class Solution {
public:
    bool isPalindrome(string s){
        if(s.size()==1)return true;
        for(int i=0;i<s.size()>>1;i++){
            if(s[i]!=s[s.size()-1-i])return false;
        }
        return true;
    }
    int minCut(string s) {
        if (s.size()<2 || isPalindrome(s))
        {
            return 0;
        }
        vector<vector<int>> dp(s.size(),std::vector<int>(s.size(),0x0fffffff));
        for (int i = 0; i < s.size(); ++i)
        {
            dp[i][i] = 0;
        }
        for (int i = 1; i < s.size(); ++i)
        {
            for (int j = 0; j < s.size()-i; ++j)
            {
                if (isPalindrome(s.substr(j,i+1)))
                {
                    dp[j][i+j] = 0;
                }else{
                    for (int k = 0; k < i; ++k)
                    {
                        dp[j][i+j] = min(dp[j][i+j] , dp[j][j+k]+1+dp[j+k+1][i+j]);
                    }
                }
            }
        }
        return dp[0][s.size()-1];
    }
};
