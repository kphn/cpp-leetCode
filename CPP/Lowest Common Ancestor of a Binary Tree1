/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool getThePath(TreeNode *root,TreeNode *p,vector<TreeNode*> &res){         //得到的是倒序序列
        if(!root)return false;
        if(root == p){
            res.push_back(root);
            return true;
        }
        if(getThePath(root->left , p,res) || getThePath(root->right,p,res)){
            res.push_back(root);
            return true;
        }
        return false;
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        if(p==root || q==root)return root;
        std::vector<TreeNode*> v1,v2;
        getThePath(root,p,v1); 
        getThePath(root,q,v2);
        for(int i=0;i<min(v1.size(),v2.size());i++){
            if(v1[v1.size()-1-i]!=v2[v2.size()-1-i])
                return v1[v1.size()-i];
        }
        if(v1.size()<v2.size())return v1[0];
        return v2[0];

    }
};
