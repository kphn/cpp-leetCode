class Solution {
public:
    int maxProfit(int k, vector<int>& prices) {
        if(prices.size()<2 || k==0)return 0;
        int maxEarn=0;       //所能争取的最大数值
        for(int i=1;i<prices.size();i++){
            maxEarn += max(0,prices[i]-prices[i-1]);
        }
		if(k*2 >= prices.size())return maxEarn;                 //最大交易次数为prices.size()/2
        std::vector<int> profit(k,0),temp(k,0xf0ffffff);    //profit[i]表示第i+1次售卖后的所得，temp[0]表示当前最小股票价格，temp[i]表示第i+1次买股票后剩余的钱
        temp[0] = prices[0];
        for(int i=0;i<prices.size();i++){
            temp[0] = min(temp[0],prices[i]);
            profit[0] = max(profit[0],prices[i] - temp[0]);
            for(int j=1;j<k;j++){
                temp[j] = max(temp[j],profit[j-1]-prices[i]);
                profit[j]=max(profit[j],temp[j]+prices[i]);
            }
        }
        return profit[k-1];
    }
};
