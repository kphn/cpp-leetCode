/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
	TreeNode* buildTreeHelper(vector<int>& inorder, vector<int>& postorder,int is,int ie,int ps,int pe,map<int,int>&tab){
		if(inorder.empty() || ie<is)return NULL;
		TreeNode*root = new TreeNode(postorder[pe]);
		int n = tab[postorder[pe]];
		root->left = buildTreeHelper(inorder,postorder,is,n-1,ps,ps+n-1-is,tab);
		root->right = buildTreeHelper(inorder,postorder,n+1,ie,ps+n-is,pe-1,tab);
		return root;
	}
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        map<int ,int>tab;
        for(int i=0;i<inorder.size();i++){
            tab[inorder[i]]=i;
        }
        return buildTreeHelper(inorder,postorder,0,inorder.size()-1,0,postorder.size()-1,tab);
    }

};
