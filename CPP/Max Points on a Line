/**
 * Definition for a point.
 * struct Point {
 *     int x;
 *     int y;
 *     Point() : x(0), y(0) {}
 *     Point(int a, int b) : x(a), y(b) {}
 * };
 */
class Solution {
public:
    int maxPoints(vector<Point>& points) {
    	int len = points.size(),res=1;
    	if (len==0)return 0;
        unordered_map<double,int>mymap;
        for (int i = 0; i < len; ++i)
        {
        	mymap.clear();
        	int samePointNum = 0,tempRes=1;
        	for (int j = i+1; j < len; ++j)
        	{
        		//斜率初始化为无限大
        		double slope = std::numeric_limits<double>::infinity();
        		if (points[i].x != points[j].x)
        		{
        			slope = 1.0*(points[i].y - points[j].y)/(points[i].x - points[j].x);
        		}else if (points[i].y == points[j].y)
        		{
        			++samePointNum;
        			continue;
        		}
        		int tmp;
        		if (mymap.find(slope) != mymap.end())
        		{
        			tmp = ++ mymap[slope];
        		}else{
        			mymap[slope] = 2;
        			tmp = 2;
        		}
        		tempRes = max(tempRes,tmp);
        	}
        	res = max(res,tempRes+samePointNum);
        }
        return res;
    }
};
