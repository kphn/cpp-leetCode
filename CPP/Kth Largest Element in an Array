class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        //分别使用分治法与堆来解决，分治法采用与快排算法相同的策略
        //分治法
        return findKthLargestHelper(nums,k-1,0,nums.size()-1);
    }
    int findKthLargestHelper(vector<int>&nums,int k,int low,int high){
        int start = low;
        for (int i = start; i < high; ++i)
        {
            if (nums[i]>=nums[high])
            {
                int temp = nums[start];
                nums[start++] = nums[i];
                nums[i] = temp;
            }
        }
        int temp = nums[high];
        nums[high] = nums[start];
        nums[start] = temp;
        if (start == k)
        {
            return nums[k];
        }else if (start>k)
        {
            return findKthLargestHelper(nums,k,0,start-1);
        }else{
            return findKthLargestHelper(nums,k,start+1,high);
        }
    }
};
