/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
class Solution {
public:
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) {
        std::vector<Interval> res;
        for (int i = 0; i < intervals.size(); ++i)
        {
        	if (intervals[i].end < newInterval.start)
        	{
        		res.push_back(intervals[i]);
        	}else{
        		if (newInterval.end<intervals[i].start)
        		{
        			res.push_back(newInterval);
        			for (int j = i; j < intervals.size(); ++j)
        			{
        				res.push_back(intervals[j]);
        			}
        			return res;
        		}else{
        			newInterval.start = min(newInterval.start,intervals[i].start);
        			if (newInterval.end < intervals[i].end)
        			{
        				newInterval.end = intervals[i].end;
        				res.push_back(newInterval);        			
        				for (int j = i+1; j < intervals.size(); ++j)
	        			{
	        				res.push_back(intervals[j]);
	        			}
	        			return res;
        			}
        			continue;
        		}
        	}
        }
        res.push_back(newInterval);
        return res;

    }
};
