class Solution {
public:
    void SplitString(const std::string& s, std::vector<std::string>& v, const std::string& c)
    {
      std::string::size_type pos1, pos2;
      pos2 = s.find(c);
      pos1 = 0;
      while(std::string::npos != pos2)
      {
        v.push_back(s.substr(pos1, pos2-pos1));
     
        pos1 = pos2 + c.size();
        pos2 = s.find(c, pos1);
      }
      if(pos1 != s.length())
        v.push_back(s.substr(pos1));
    }
    bool wordPattern(string pattern, string str) {
        vector<string> v;
        SplitString(str,v," ");
        map<char,string>m;
        set<string>s;
        if(pattern.size()!=v.size())return false;
        for(int i=0;i<pattern.size();i++){
            if(m.find(pattern[i])!=m.end()){
                if(m[pattern[i]] != v[i])return false;
            }else m[pattern[i]] = v[i];
        }
		for(map<char,string>::iterator iter = m.begin();iter != m.end();iter++)
			s.insert(iter->second);
        if(s.size()!=m.size())
			return false;
        return true;
    }
};
