/**
 * Definition for binary tree
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class BSTIterator {
public:
    BSTIterator(TreeNode *root) {
        initV(root,v);
        i=0;
    }

    /** @return whether we have a next smallest number */
    bool hasNext() {
        if (i<v.size())
        {
            return true;
        }
    }

    /** @return the next smallest number */
    int next() {
        return v[i++];
    }
    void initV(TreeNode* root,std::vector<int> &v){
        if (!root)
        {
            return;
        }
        initV(root->left,v);
        v.push_back(root->val);
        initV(root->right,v);
    }
private:
    int i;
    std::vector<int> v;
};

/**
 * Your BSTIterator will be called like this:
 * BSTIterator i = BSTIterator(root);
 * while (i.hasNext()) cout << i.next();
 */
