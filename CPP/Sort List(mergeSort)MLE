class Solution {
public:
    ListNode* sortHalf(ListNode*head,int length){
        if (length == 1)
        {
            return head;
        }
        ListNode*t =head;
        for (int i = 0; i < length/2-1; ++i)
        {
             t = t->next;
        }
		ListNode*temp = t->next;
		t->next = NULL;
		return combine(sortHalf(head,length/2),sortHalf(temp,length - length/2));
    }
    ListNode*combine(ListNode*half1,ListNode*half2){
        ListNode*head = new ListNode(0),*p=head,*p1 = half1,*p2=half2;
        while (p1 && p2)
        {
            int num1 = p1->val,num2 = p2->val;
            if (num1<num2)
            {
                p->next = new ListNode(num1);
                p1 = p1->next;
            }else{
                p->next = new ListNode(num2);
                p2 = p2->next;
            }
            p = p->next;
        }
        while(p1){
            p->next = new ListNode(p1->val);
            p = p->next;
            p1=p1->next;
        }
        while(p2){
            p ->next = new ListNode(p2->val);
            p = p->next;
            p2 = p2->next;
        }
        return head->next;
    }
    ListNode* sortList(ListNode* head) {
        int length=0;
        ListNode*t = head;
        while(t){
            length++;
            t=t->next;
        }
        if(length<2)return head;
        t = head;
        for (int i = 0; i < length/2-1; ++i)
        {
            t = t->next;
        }
		ListNode*temp = t->next;
		t->next = NULL;
        return combine(sortHalf(head,length/2),sortHalf(temp,length- length/2));
    }
};
