class Solution {
public:
    bool dfs(vector<vector<char>>& board, string word,vector<vector<bool>> letterUsed,int i,int j){
        int xTo[] = {0,1,0,-1},yTo[] = {1,0,-1,0};
        if (word.empty())
        {
            return true;
        }
        if (letterUsed[i][j]==true || board[i][j] != word[0])
        {
            return false;
        }
        letterUsed[i][j] = true;
        int x,y;
        for (int k = 0; k < 4; ++k)
        {
            x = i+xTo[k];
            y = j+yTo[k];
            if (x>=0 && x<board.size() && y>=0 && y<board[0].size())
            {
                if (dfs(board,word.substr(1,word.size()-1),letterUsed,x,y))
                {
                    return true;
                }
            }
        }
        return false;

    }
    bool exist(vector<vector<char>>& board, string word) {
        if (board.empty())
        {
            return false;
        }
		vector<vector<bool>> letterUsed(board.size(),vector<bool>(board[0].size(),false));
        for (int i = 0; i < board.size(); ++i)
        {
            for (int j = 0; j < board[0].size(); ++j)
            {
                if (board[i][j] == word[0])
                {
                    if (dfs(board,word,letterUsed,i,j))
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }
};
