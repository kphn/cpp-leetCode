class Solution {
public:
	vector<int> spiralOrder(vector<vector<int>>& matrix) {
		std::vector<int> res;
		if (matrix.empty())
		{
			return res;
		}
		vector<vector<bool>>vis(matrix.size(),vector<bool>(matrix[0].size(),false));
		int xTo[] = {0,1,0,-1};
		int yTo[] = {1,0,-1,0};
		int nowState = 0,visited=0,startX=0,startY=0;
		while(visited < matrix.size()*matrix[0].size()){
			vis[startX][startY] = true;
			visited++;
			res.push_back(matrix[startX][startY]);
			int tempX = startX+xTo[nowState],tempY = startY+yTo[nowState];
			if(!(tempX>=0 && tempX<matrix.size() && tempY>=0 && tempY<matrix[0].size() && !vis[tempX][tempY])){
				nowState = (nowState+1)%4;
				tempX = startX+xTo[nowState];
				tempY = startY+yTo[nowState];
			}

			startX = tempX;
			startY = tempY;
		}
		return res;
	}
};
