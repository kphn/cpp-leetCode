/**
 * Definition for an interval.
 * struct Interval {
 *     int start;
 *     int end;
 *     Interval() : start(0), end(0) {}
 *     Interval(int s, int e) : start(s), end(e) {}
 * };
 */
 bool com(Interval i1,Interval i2){
 	if (i1.start==i2.start)
 	{
 		return i1.end>i2.end;
 	}
 	return i1.start < i2.start;
 }
class Solution {
public:
    vector<Interval> merge(vector<Interval>& intervals) {
        sort(intervals.begin(),intervals.end(),com);
        std::vector<Interval> res;
        if (intervals.empty())
        {
        	return res;
        }
        Interval temp = intervals[0];
        for (int i = 1; i < intervals.size(); ++i)
        {
        	if (temp.end >= intervals[i].end)
        	{
        		continue;
        	}else{
        		if (temp.end < intervals[i].start)
        		{
        			res.push_back(temp);
        			temp = intervals[i];
        			continue;
        		}else{
        			temp.end = intervals[i].end;
        		}
        	}
        }
        res.push_back(temp);
        return res;
    }
};
