/*跟word ladder相比，这道题是求路径本身而不是路径长度，也是用BFS
由于要输出所有路径，因此在记录前驱和判重地方与普通的广度搜索有所不同
*/
class Solution {
private:
  void buildPath(unordered_map<string,vector<string>>&father,vector<string>&path,const string &start,const string&word,vector<vector<string>>&res){
    path.push_back(word);
    if (word == start)
    {
      res.push_back(path);
      reverse(res.back().begin(),res.back().end());
    }else{
      for(auto f:father[word]){
        buildPath(father,path,start,f,res);
      }
    }
    path.pop_back();
  }
public:
    vector<vector<string>> findLadders(string beginWord, string endWord, unordered_set<string> &wordList) {
        unordered_set<string>visited; //判重
        unordered_map<string,std::vector<string>>father;//树
        unordered_set<string>current,next;//当前层，下一层，用集合是为了去重

        bool found = false;

        current.insert(beginWord);
        while(!current.empty() && !found){
          //先将本层全部置为已经访问，防止同层之间互相指向
          for (auto word:current)
          {
            visited.insert(word);
          }
          for (auto word:current)
          {
            for (int i = 0; i < word.size(); ++i)
            {
              string new_word = word;
              for (char c = 'a'; c <= 'z'; ++c)
              {
                if (c == new_word[i])continue;
                swap(c,new_word[i]);

                if (new_word == endWord)found = true;
                if (visited.count(new_word) == 0 &&(wordList.count(new_word)>0 || new_word == endWord))
                {
                  next.insert(new_word);
                  father[new_word].push_back(word);
                }
                swap(c,new_word[i]);   //restore
              }
            }
          }
          current.clear();
          swap(current,next);
        }
        std::vector<std::vector<string>> res;
        if (found)
        {
          std::vector<string> path;
          buildPath(father,path,beginWord,endWord,res);
        }
        return res;
    }

};
