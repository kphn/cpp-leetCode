class Solution {
public:
	void dfs(int target,int k,int now,vector<int> v,vector<vector<int>>& res){
		for (int i = now; i <= 9; ++i)
		{
			if (i<target)
			{
				if (v.size()>=k-1)
				{
					continue;
				}else{
					v.push_back(i);
					dfs(target-i,k,i+1,v,res);
					v.pop_back();
				}
			}else if (i==target)
			{
				v.push_back(i);
				if (v.size()==k)
				{
					res.push_back(v);
					return;
				}
			}else return;
		}
	}
    vector<vector<int>> combinationSum3(int k, int n) {
        vector<vector<int>> res;
        std::vector<int> v;
        if (n<k || n>9*k)
        {
        	return res;
        }
        dfs(n,k,1,v,res);
        return res;
    }
};
