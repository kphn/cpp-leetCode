class Solution {
public:
    void dfs(vector<string> &res, string num, string out, int target, long long diff, long long curVal) {
        if (num.empty() && curVal == target) {
            res.push_back(out);
            return;
        }
        string curNum, nextNum;
        for (int i = 1; i <= num.size(); ++i) {
            curNum = num.substr(0, i);
            nextNum = num.substr(i);
            if (curNum.size() > 1 && curNum[0] == '0') return;
            if (out.empty()) {
                dfs(res, nextNum, curNum, target, stoll(curNum), stoll(curNum));
            } else {
                dfs(res, nextNum, out + "+" + curNum, target, stoll(curNum), curVal + stoll(curNum));
                dfs(res, nextNum, out + "-" + curNum, target, -stoll(curNum), curVal - stoll(curNum));
                dfs(res, nextNum, out + "*" + curNum, target, diff * stoll(curNum), curVal - diff + diff * stoll(curNum));
            }
        }
    }
    vector<string> addOperators(string num, int target) {
        vector<string> res;
        dfs(res, num, "", target, 0, 0);
        return res;
    }
};
