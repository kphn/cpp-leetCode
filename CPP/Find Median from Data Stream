struct cmp1
{
	bool operator ()(int x, int y)
	{
		return x > y;//小的优先级高
	}
};
class MedianFinder {
private:
	priority_queue<int>maxQ;    //存储较小的那一半
	priority_queue<int,vector<int>,cmp1>minQ;   //存储较大的那一半

public:

	// Adds a number into the data structure.
	void addNum(int num) {
		if (maxQ.empty() && minQ.empty())
		{
			maxQ.push(num);
		}else if (maxQ.size() == minQ.size())
		{
			if (num > minQ.top())
			{
				minQ.push(num);
			}else if (num<maxQ.top())
			{
				maxQ.push(num);
			}else{
				maxQ.push(num);
			}
		}else if (maxQ.size()>minQ.size())
		{
			if(minQ.empty()){
				if(num>=maxQ.top()){
					minQ.push(num);
				}else{
					maxQ.push(num);
					minQ.push(maxQ.top());
					maxQ.pop();
				}
			}else if (num>=maxQ.top())
			{
				minQ.push(num);
			}else{
				minQ.push(maxQ.top());
				maxQ.pop();
				maxQ.push(num);
			}
		}else {
			if(maxQ.empty()){
				if(num<=minQ.top()){
					maxQ.push(num);
				}else{
					maxQ.push(minQ.top());
					minQ.pop();
					minQ.push(num);
				}
			}else if (num<=minQ.top())
			{
				maxQ.push(num);
			}else{
				maxQ.push(minQ.top());
				minQ.pop();
				minQ.push(num);
			}
		}
	}

	// Returns the median of current data stream
	double findMedian() {
		if (minQ.size()>maxQ.size())
		{
			return minQ.top();
		}else if (minQ.size()<maxQ.size())
		{
			return maxQ.top();
		}else{
			if(minQ.empty())return 0;
			return ((double)minQ.top()+(double)maxQ.top())/2;
		}
	}
};

// Your MedianFinder object will be instantiated and called as such:
// MedianFinder mf;
// mf.addNum(1);
// mf.findMedian();
