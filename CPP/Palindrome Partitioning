class Solution {
public:
    bool isPalindrome(string s){
    	if(s.size()==1)return true;
    	for(int i=0;i<s.size()>>1;i++){
    		if(s[i]!=s[s.size()-1-i])return false;
    	}
    	return true;
    }
    
    void dfs(string s,vector<string> v,vector<vector<string>> &res){
		if(s.empty()){
			res.push_back(v);
			return;
		}
        if(s.size()==1){
			v.push_back(s);
            res.push_back(v);
            return;
        }
        for(int i=1;i<=s.size();i++){
            if(isPalindrome(s.substr(0,i))){
                v.push_back(s.substr(0,i));
                dfs(s.substr(i,s.size()),v,res);
				v.pop_back();
            }
        }
    }

    vector<vector<string>> partition(string s) {
    	vector<vector<string>>res;
        std::vector<string> v;
        dfs(s,v,res);
        return res;    
    }
};
