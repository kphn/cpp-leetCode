/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    map<TreeNode*,TreeNode*>mapOfTree;
    void initMap(TreeNode *root){
        if(!root)return;
        if(root->left)mapOfTree.insert(pair<TreeNode*,TreeNode*>(root->left,root));
        if(root->right)mapOfTree.insert(pair<TreeNode*,TreeNode*>(root->right,root));
		initMap(root->left);
		initMap(root->right);
    }
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        mapOfTree.clear();
        initMap(root);
        std::vector<TreeNode*> v1,v2;
        TreeNode *start1=p,*start2=q;
        while(start1!=root){
            v1.push_back(start1);
            start1 = mapOfTree[start1];
        }
        while(start2!=root){
            v2.push_back(start2);
            start2 = mapOfTree[start2];
        }
        if(v1.empty() || v2.empty() || v1[v1.size()-1]!=v2[v2.size()-1])return root;
        TreeNode*res;
        for(int i=0;i<v1.size();i++){
            if(v1[v1.size()-1-i]!=v2[v2.size()-1-i])return v1[v1.size()-i];
        }
        return v1[0];
    }
};
